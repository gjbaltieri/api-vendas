{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "API Vendas - 1.0.0",
    "description": "This is an api created in Typescript to work with sales, in it I use technologies such as: JWT, Express, cache (Redis), typeorm, among others, always adopting good practices such as SOLID, dependency inversion and TDD.\n- [Linkedin](https://www.linkedin.com/in/gustavo-baltieri-581aa623b/)\n- [The source API](https://github.com/gjbaltieri/api-vendas)"
  },
  "host": "/",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Product",
      "description": "Everything about Products"
    },
    {
      "name": "User",
      "description": "Everything about Users"
    },
    {
      "name": "Session",
      "description": "Everything about Session"
    },
    {
      "name": "Password",
      "description": "Everything about Password"
    },
    {
      "name": "Customer",
      "description": "Everything about Customers"
    },
    {
      "name": "Order",
      "description": "Everything about Orders"
    }
  ],
  "paths": {
    "/password/forgot/": {
      "post": {
        "tags": [
          "Password"
        ],
        "summary": "Send fake email to a user who forgot their password",
        "description": "Returns a password reset fake email link - Expires in 2 hours - await ~ 35 seconds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "email@mail.com",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FakeMail"
                }
              }
            }
          }
        }
      }
    },
    "/password/reset/": {
      "post": {
        "tags": [
          "Password"
        ],
        "summary": "Use Token to reset User password",
        "description": "Reset a password using the generated and emailed token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "4d343a23-1f9c-402d-ab63-735d0cebec2d",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "example": "myNewPassword",
                    "required": true
                  },
                  "passwordConfirmation": {
                    "type": "string",
                    "example": "myNewPassword",
                    "required": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Create a new session using user email and password",
        "description": "Return one token for protected routs - Expires in 1 day",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "email@mail.com",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "example": "myPassword",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Email adress already used."
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Order"
        ],
        "summary": "Find all Orders",
        "description": "Return all orders in system",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create order",
        "description": "Create a new order in system",
        "requestBody": {
          "description": "Created order object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CreateOrderReturn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - There is already one product with this name"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Order"
        ],
        "summary": "Find one Order per order id",
        "description": "Return one order in system",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Order id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CreateOrderReturn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Return all Customers with pagination",
        "description": "Return all users in system",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Set the current page number -  example: 1",
            "default": 1,
            "required": true,
            "type": "string"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Set number of customer return -  example: 15",
            "default": 15,
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaginationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Create a new Customer",
        "description": "Create one customer in system",
        "requestBody": {
          "description": "Create customer object model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Email adress already used."
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Return one Customer",
        "description": "Return one customer per id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Delete one Customer per id",
        "description": "Delete one customer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation a void array - [ ]"
          },
          "400": {
            "description": "Bad Request - Customer not found."
          }
        }
      },
      "put": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Update one Customer per id",
        "description": "Update one customer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update customer model",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Customer not found."
          }
        }
      }
    },
    "/users/": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Find all Users",
        "description": "Return all users in system",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Return all users in system",
        "requestBody": {
          "description": "Created product object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Email adress already used."
          }
        }
      }
    },
    "users/{id}": {
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Delete a one User per id",
        "description": "Delete one user in system",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "request": {
          "type": "query",
          "description": "Delete user object"
        },
        "responses": {
          "200": {
            "description": "successful operation - [ ]",
            "content": {
              "application/json": []
            }
          },
          "400": {
            "description": "Bad Request - User not found."
          }
        }
      }
    },
    "/profile/": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Shows the profile referring to the token informed in authentication",
        "description": "Return all products in system",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/profile/update": {
      "put": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Update the profile referring to the token informed in authentication",
        "description": "Update one profile",
        "requestBody": {
          "description": "Update user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - One or more fild is invalid"
          }
        }
      }
    },
    "/profile/avatar": {
      "patch": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "consumes": "multipart/form-data",
        "summary": "Send image file to use in avatar - see image in /files/{fileName}",
        "description": "send a image file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "file"
                  }
                }
              },
              "encoding": {
                "avatar": {
                  "contentType": [
                    "image/png",
                    "image/jpeg"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find all Products",
        "description": "Return all products in system",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create product",
        "description": "Create a new product in system",
        "requestBody": {
          "description": "Created product object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - There is already one product with this name"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find Product by id",
        "description": "Return one product per id in query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Product/properties/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Finds Product by id",
        "description": "Return one product per id in query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Product/properties/id"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Update user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete Product per id",
        "description": "Delete one product per id in query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Product/properties/id"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": []
            }
          },
          "400": {
            "description": "Product not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "NewProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "livro"
          },
          "price": {
            "type": "number",
            "example": 50
          },
          "quantity": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "72a65b9a-e17e-41a0-96ad-da06e323b130"
          },
          "name": {
            "type": "string",
            "example": "livro"
          },
          "price": {
            "type": "number",
            "example": 1
          },
          "quantity": {
            "type": "integer",
            "example": 50
          },
          "created_At": {
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          },
          "updated_At": {
            "type": "string",
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "751b1892-3de4-4ccf-aaf9-89a17e3c52ce"
          },
          "name": {
            "type": "string",
            "example": "Gustavo"
          },
          "email": {
            "type": "string",
            "example": "email@mail.com"
          },
          "password": {
            "type": "string",
            "example": "$2a$08$9HdkbsPTIo5vfXc7lByqG.XP/XwE3g9qGem3r4MVL7GcEtd5nJtwi"
          },
          "avatar": {
            "type": "string",
            "example": null
          },
          "created_At": {
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          },
          "updated_At": {
            "type": "string",
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          }
        }
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Gustavo"
          },
          "email": {
            "type": "string",
            "example": "email@mail.com"
          },
          "password": {
            "type": "string",
            "example": "myPassword"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "name": {
            "required": true,
            "type": "string",
            "example": "New Name"
          },
          "email": {
            "required": true,
            "type": "string",
            "example": "email@mail.com"
          },
          "old_password": {
            "required": true,
            "type": "string",
            "example": "current_password"
          },
          "password": {
            "required": true,
            "type": "string",
            "example": "newPassword"
          },
          "passwordConfirmation": {
            "required": true,
            "type": "string",
            "example": "newPassword"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "b6a12e1c-5a96-4bec-a909-fba45436b7c5"
          },
          "name": {
            "type": "string",
            "example": "New Name"
          },
          "email": {
            "type": "string",
            "example": "email@mail.com"
          },
          "created_At": {
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          },
          "updated_At": {
            "type": "string",
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          }
        }
      },
      "CustomerPaginationResponse": {
        "type": "object",
        "properties": {
          "from": {
            "type": "number",
            "example": 1
          },
          "to": {
            "type": "number",
            "example": 15
          },
          "per_page": {
            "type": "number",
            "example": 15
          },
          "total": {
            "type": "number",
            "example": 47
          },
          "current_page": {
            "type": "number",
            "example": 1
          },
          "prev_page": {
            "type": "number",
            "example": null
          },
          "next_page": {
            "type": "number",
            "example": 2
          },
          "last_page": {
            "type": "number",
            "example": 2
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "CreateOrUpdateCustomer": {
        "properties": {
          "name": {
            "type": "string",
            "example": "Name"
          },
          "email": {
            "type": "string",
            "example": "mail@mail.com"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "b6a12e1c-5a96-4bec-a909-fba45436b7c5"
          },
          "created_At": {
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          },
          "updated_At": {
            "type": "string",
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          }
        }
      },
      "CreateOrder": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "example": "b6a12e1c-5a96-4bec-a909-fba45436b7c5"
          },
          "products": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "72a65b9a-e17e-41a0-96ad-da06e323b130"
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                }
              }
            }
          }
        }
      },
      "CreateOrderReturn": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order_products": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "8605c857-ef27-41b2-aad8-49234776fed7"
                },
                "price": {
                  "type": "number",
                  "example": 20.00
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "order_id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "9ce31165-6979-4c41-b8da-eafd4193ad47"
                },
                "updated_At": {
                  "type": "string",
                  "format": "date",
                  "example": "2022-10-06T22:53:39.626Z"
                }
              }
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "b6a12e1c-5a96-4bec-a909-fba45436b7c5"
          },
          "created_At": {
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          },
          "updated_At": {
            "type": "string",
            "format": "date",
            "example": "2022-10-06T22:53:39.626Z"
          }
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "object",
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NjY3MTI2OTMsImV4cCI6MTY2Njc5OTA5Mywic3ViIjoiNzUxYjE4OTItM2RlNC00Y2NmLWFhZjktODlhMTdlM2M1MmNlIn0.0BD6DElnD0BztkfxWhPIi0M-_xyDyfZFrrb9zh66uIM"
          }
        }
      },
      "FakeMail": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "example": "<9ba98643-dd11-1430-81f4-77edcf858a78@apivendas.com.br>"
          },
          "messageLink": {
            "type": "string",
            "example": "https://ethereal.email/message/Y1gs-.tGBWK-96f2Y1gtHNrdTSTO3aUgAAAAARRz5hTCai6Ig5Jsup5aUms"
          }
        }
      }
    }
  }
}
